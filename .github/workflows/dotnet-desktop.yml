name: Build and Publish

on:
  push:
    branches:
      - main  # Replace with your default branch name

jobs:
  build:
    runs-on: windows-latest  # Use windows-latest for Windows x64 platform

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Create Release Directory
      run: mkdir -p bin\Release\net8.0-win-x64

    - name: Setup .NET Core SDK
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '8.0.x'  # Replace with the exact version of .NET 8.0 you're using

    - name: Restore dependencies
      run: dotnet restore "YimMenu Updater/YimMenu Updater.csproj"

    - name: Build YimMenu Updater
      run: dotnet publish "YimMenu Updater/YimMenu Updater.csproj" -c Release -r win-x64 --self-contained -o ./bin/Release/net8.0-win-x64/

    - name: Rename YimMenu Updater.exe to YMU.exe
      run: Rename-Item -Path "./bin/Release/net8.0-win-x64/YimMenu Updater.exe" -NewName "YMU.exe"

    - name: Verify Build Output
      run: dir ./bin/Release/net8.0-win-x64/

    - name: Copy dllinject.exe to Build Output
      run: Copy-Item -Path "./YimMenu Updater/dllinject.exe" -Destination "./bin/Release/net8.0-win-x64/" -Force

    - name: Upload Executables
      uses: actions/upload-artifact@v2
      with:
        name: Executables
        path: |
          ./bin/Release/net8.0-win-x64/YMU.exe
          ./bin/Release/net8.0-win-x64/dllinject.exe

    - name: Create GitHub Release
      id: create_release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v1.0.0  # Replace with your desired release tag/version
        files: |
          ./bin/Release/net8.0-win-x64/YMU.exe
          ./bin/Release/net8.0-win-x64/dllinject.exe

    - name: Release URL
      run: echo "The release URL is ${{ steps.create_release.outputs.upload_url }}"

    - name: Delete Existing Release Assets
      uses: actions/github-script@v6
      with:
        script: |
          const { Octokit } = require("@octokit/rest");
          const octokit = new Octokit({ auth: process.env.GITHUB_TOKEN });
          
          const owner = context.repo.owner;
          const repo = context.repo.repo;
          
          const { data: releases } = await octokit.repos.listReleases({
            owner,
            repo
          });
          
          const release = releases.find(r => r.tag_name === 'v1.0.0');
          
          if (release) {
            const release_id = release.id;
            const { data: assets } = await octokit.repos.listReleaseAssets({
              owner,
              repo,
              release_id
            });
            
            for (const asset of assets) {
              await octokit.repos.deleteReleaseAsset({
                owner,
                repo,
                asset_id: asset.id
              });
            }
          }
